{"version":3,"sources":["components/navigationBar.jsx","components/customStyles.jsx","components/pages/homePage.jsx","components/pages/aboutPage.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","fixed","bg","variant","expand","Brand","className","href","height","src","alt","Toggle","aria-controls","Collapse","id","Nav","fill","Item","Link","Button","Component","CustomStyles","type","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iSA2CeA,E,iLApCX,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MAClD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,UAAU,YAAYC,KAAK,KACvC,yBAAKC,OAAQ,GAAIC,IAAI,0BAA0BC,IAAI,MAErD,kBAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,0BAC7B,kBAACZ,EAAA,EAAOa,SAAR,CACEC,GAAG,wBACHR,UAAU,0BAEV,kBAACS,EAAA,EAAD,CAAKC,MAAI,GACP,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUX,KAAK,SAAf,SAEF,kBAACQ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUX,KAAK,UAAf,UAEF,kBAACQ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUX,KAAK,QAAf,SAEF,kBAACQ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUX,KAAK,UAAf,UAEF,kBAACQ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUX,KAAK,YAAf,YAEF,kBAACQ,EAAA,EAAIE,KAAL,KACE,kBAACE,EAAA,EAAD,CAAQhB,QAAQ,aAAhB,oB,GA7BciB,aCyBbC,E,iLA1BX,OACE,2BAAOC,KAAK,YAAZ,6c,GAHqBF,aCAJA,YCACA,YCiBTG,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFAkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,QAAwB7B,OAAOC,SAASpB,MACpDiD,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,QAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.e70f9666.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Button from \"react-bootstrap/Button\";\n\nclass NavigationBar extends Component {\n  render() {\n    return (\n      <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand className=\"home-icon\" href=\"/\">\n          <img height={40} src=\"./images/logo-white.png\" alt=\"\" />\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse\n          id=\"responsive-navbar-nav\"\n          className=\"justify-content-center\"\n        >\n          <Nav fill>\n            <Nav.Item>\n              <Nav.Link href=\"#home\">Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"#about\">About</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"#rvs\">RV's</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"#tents\">Tents</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"#explore\">Explore</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Button variant=\"leos-blue\">Book Now</Button>\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\n\nclass CustomStyles extends Component {\n  render() {\n    return (\n      <style type=\"text/css\">\n        {`\n            .btn-leos-blue {\n                background-color: white;\n                color: #001830;\n                margin-top: 1px;\n            }\n\n            .btn-leos-blue:hover {\n                background-color: #e6e6e6;\n            }\n\n            .bg-dark {\n                background-color: #001830 !important;\n            }\n\n            .navbar {\n                padding: 5px 1rem 5px 1rem !important;\n            }\n        `}\n      </style>\n    );\n  }\n}\n\nexport default CustomStyles;\n","import React, { Component } from \"react\";\n\nclass HomePage extends Component {\n  state = {};\n  render() {\n    return <div></div>;\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nclass AboutPage extends Component {\n  state = {};\n  render() {\n    return <div></div>;\n  }\n}\n\nexport default AboutPage;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport NavigationBar from \"./components/navigationBar\";\nimport CustomStyles from \"./components/customStyles\";\nimport HomePage from \"./components/pages/homePage\";\nimport AboutPage from \"./components/pages/aboutPage\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomStyles></CustomStyles>\n      <NavigationBar></NavigationBar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}